temperature: 0.5
maxTokens: 16384
---
<system>
You are a senior software engineer with 10+ years of experience. You are writing commit messages for a git repository.
</system>

Use the following guides to write a commit message:

# Conventional Commits 1.0.0

[](#summary)Summary
-------------------

The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with [SemVer](http://semver.org), by describing the features, fixes, and breaking changes made in commit messages.

The commit message should be structured as follows:

* * *

    <type>[optional scope]: <description>
    
    [optional body]
    
    [optional footer(s)]
    

* * *

The commit contains the following structural elements, to communicate intent to the consumers of your library:

1.  **fix:** a commit of the _type_ `fix` patches a bug in your codebase (this correlates with [`PATCH`](http://semver.org/#summary) in Semantic Versioning).
2.  **feat:** a commit of the _type_ `feat` introduces a new feature to the codebase (this correlates with [`MINOR`](http://semver.org/#summary) in Semantic Versioning).
3.  **BREAKING CHANGE:** a commit that has a footer `BREAKING CHANGE:`, or appends a `!` after the type/scope, introduces a breaking API change (correlating with [`MAJOR`](http://semver.org/#summary) in Semantic Versioning). A BREAKING CHANGE can be part of commits of any _type_.
4.  _types_ other than `fix:` and `feat:` are allowed, for example [@commitlint/config-conventional](https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional) (based on the [Angular convention](https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines)) recommends `build:`, `chore:`, `ci:`, `docs:`, `style:`, `refactor:`, `perf:`, `test:`, and others.
5.  _footers_ other than `BREAKING CHANGE: <description>` may be provided and follow a convention similar to [git trailer format](https://git-scm.com/docs/git-interpret-trailers).

Additional types are not mandated by the Conventional Commits specification, and have no implicit effect in Semantic Versioning (unless they include a BREAKING CHANGE). A scope may be provided to a commit’s type, to provide additional contextual information and is contained within parenthesis, e.g., `feat(parser): add ability to parse arrays`.

[](#examples)Examples
---------------------

### [](#commit-message-with-description-and-breaking-change-footer)Commit message with description and breaking change footer

    feat: allow provided config object to extend other configs
    
    BREAKING CHANGE: `extends` key in config file is now used for extending other config files
    

### [](#commit-message-with--to-draw-attention-to-breaking-change)Commit message with `!` to draw attention to breaking change

    feat!: send an email to the customer when a product is shipped
    

### [](#commit-message-with-scope-and--to-draw-attention-to-breaking-change)Commit message with scope and `!` to draw attention to breaking change

    feat(api)!: send an email to the customer when a product is shipped
    

### [](#commit-message-with-both--and-breaking-change-footer)Commit message with both `!` and BREAKING CHANGE footer

    chore!: drop support for Node 6
    
    BREAKING CHANGE: use JavaScript features not available in Node 6.
    

### [](#commit-message-with-no-body)Commit message with no body

    docs: correct spelling of CHANGELOG
    

### [](#commit-message-with-scope)Commit message with scope

    feat(lang): add Polish language
    

### [](#commit-message-with-multi-paragraph-body-and-multiple-footers)Commit message with multi-paragraph body and multiple footers

    fix: prevent racing of requests
    
    Introduce a request id and a reference to latest request. Dismiss
    incoming responses other than from latest request.
    
    Remove timeouts which were used to mitigate the racing issue but are
    obsolete now.
    
    Reviewed-by: Z
    Refs: #123
    

[](#specification)Specification
-------------------------------

The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in [RFC 2119](https://www.ietf.org/rfc/rfc2119.txt).

1.  Commits MUST be prefixed with a type, which consists of a noun, `feat`, `fix`, etc., followed by the OPTIONAL scope, OPTIONAL `!`, and REQUIRED terminal colon and space.
2.  The type `feat` MUST be used when a commit adds a new feature to your application or library.
3.  The type `fix` MUST be used when a commit represents a bug fix for your application.
4.  A scope MAY be provided after a type. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., `fix(parser):`
5.  A description MUST immediately follow the colon and space after the type/scope prefix. The description is a short summary of the code changes, e.g., _fix: array parsing issue when multiple spaces were contained in string_.
6.  A longer commit body MAY be provided after the short description, providing additional contextual information about the code changes. The body MUST begin one blank line after the description.
7.  A commit body is free-form and MAY consist of any number of newline separated paragraphs.
8.  One or more footers MAY be provided one blank line after the body. Each footer MUST consist of a word token, followed by either a `:<space>` or `<space>#` separator, followed by a string value (this is inspired by the [git trailer convention](https://git-scm.com/docs/git-interpret-trailers)).
9.  A footer’s token MUST use `-` in place of whitespace characters, e.g., `Acked-by` (this helps differentiate the footer section from a multi-paragraph body). An exception is made for `BREAKING CHANGE`, which MAY also be used as a token.
10.  A footer’s value MAY contain spaces and newlines, and parsing MUST terminate when the next valid footer token/separator pair is observed.
11.  Breaking changes MUST be indicated in the type/scope prefix of a commit, or as an entry in the footer.
12.  If included as a footer, a breaking change MUST consist of the uppercase text BREAKING CHANGE, followed by a colon, space, and description, e.g., _BREAKING CHANGE: environment variables now take precedence over config files_.
13.  If included in the type/scope prefix, breaking changes MUST be indicated by a `!` immediately before the `:`. If `!` is used, `BREAKING CHANGE:` MAY be omitted from the footer section, and the commit description SHALL be used to describe the breaking change.
14.  Types other than `feat` and `fix` MAY be used in your commit messages, e.g., _docs: update ref docs._
15.  The units of information that make up Conventional Commits MUST NOT be treated as case sensitive by implementors, with the exception of BREAKING CHANGE which MUST be uppercase.
16.  BREAKING-CHANGE MUST be synonymous with BREAKING CHANGE, when used as a token in a footer.

[](#why-use-conventional-commits)Why Use Conventional Commits
-------------------------------------------------------------

*   Automatically generating CHANGELOGs.
*   Automatically determining a semantic version bump (based on the types of commits landed).
*   Communicating the nature of changes to teammates, the public, and other stakeholders.
*   Triggering build and publish processes.
*   Making it easier for people to contribute to your projects, by allowing them to explore a more structured commit history.

[](#faq)FAQ
-----------

### [](#how-should-i-deal-with-commit-messages-in-the-initial-development-phase)How should I deal with commit messages in the initial development phase?

We recommend that you proceed as if you’ve already released the product. Typically _somebody_, even if it’s your fellow software developers, is using your software. They’ll want to know what’s fixed, what breaks etc.

### [](#are-the-types-in-the-commit-title-uppercase-or-lowercase)Are the types in the commit title uppercase or lowercase?

Any casing may be used, but it’s best to be consistent.

### [](#what-do-i-do-if-the-commit-conforms-to-more-than-one-of-the-commit-types)What do I do if the commit conforms to more than one of the commit types?

Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is its ability to drive us to make more organized commits and PRs.

### [](#doesnt-this-discourage-rapid-development-and-fast-iteration)Doesn’t this discourage rapid development and fast iteration?

It discourages moving fast in a disorganized way. It helps you be able to move fast long term across multiple projects with varied contributors.

### [](#might-conventional-commits-lead-developers-to-limit-the-type-of-commits-they-make-because-theyll-be-thinking-in-the-types-provided)Might Conventional Commits lead developers to limit the type of commits they make because they’ll be thinking in the types provided?

Conventional Commits encourages us to make more of certain types of commits such as fixes. Other than that, the flexibility of Conventional Commits allows your team to come up with their own types and change those types over time.

### [](#how-does-this-relate-to-semver)How does this relate to SemVer?

`fix` type commits should be translated to `PATCH` releases. `feat` type commits should be translated to `MINOR` releases. Commits with `BREAKING CHANGE` in the commits, regardless of type, should be translated to `MAJOR` releases.

### [](#how-should-i-version-my-extensions-to-the-conventional-commits-specification-eg-jameswomackconventional-commit-spec)How should I version my extensions to the Conventional Commits Specification, e.g. `@jameswomack/conventional-commit-spec`?

We recommend using SemVer to release your own extensions to this specification (and encourage you to make these extensions!)

### [](#what-do-i-do-if-i-accidentally-use-the-wrong-commit-type)What do I do if I accidentally use the wrong commit type?

#### [](#when-you-used-a-type-thats-of-the-spec-but-not-the-correct-type-eg-fix-instead-of-feat)When you used a type that’s of the spec but not the correct type, e.g. `fix` instead of `feat`

Prior to merging or releasing the mistake, we recommend using `git rebase -i` to edit the commit history. After release, the cleanup will be different according to what tools and processes you use.

#### [](#when-you-used-a-type-not-of-the-spec-eg-feet-instead-of-feat)When you used a type _not_ of the spec, e.g. `feet` instead of `feat`

In a worst case scenario, it’s not the end of the world if a commit lands that does not meet the Conventional Commits specification. It simply means that commit will be missed by tools that are based on the spec.

### [](#do-all-my-contributors-need-to-use-the-conventional-commits-specification)Do all my contributors need to use the Conventional Commits specification?

No! If you use a squash based workflow on Git lead maintainers can clean up the commit messages as they’re merged—adding no workload to casual committers. A common workflow for this is to have your git system automatically squash commits from a pull request and present a form for the lead maintainer to enter the proper git commit message for the merge.

### [](#how-does-conventional-commits-handle-revert-commits)How does Conventional Commits handle revert commits?

Reverting code can be complicated: are you reverting multiple commits? if you revert a feature, should the next release instead be a patch?

Conventional Commits does not make an explicit effort to define revert behavior. Instead we leave it to tooling authors to use the flexibility of _types_ and _footers_ to develop their logic for handling reverts.

One recommendation is to use the `revert` type, and a footer that references the commit SHAs that are being reverted:

    revert: let us never again speak of the noodle incident
    
    Refs: 676104e, a215868

# How to Write Better Git Commit Messages – A Step-By-Step Guide

When first introduced to Git, it's typical for developers to feel uncomfortable with the process.

You might feel uncertainty when encountering the Git commit message, unsure how to properly summarize the changes you've made and why you've made them. But the earlier in your career you can develop good committing habits, the better.

Have you ever wondered how you can improve your Git commit messages? This guide outlines steps to elevate your commit messages that you can start implementing today.

This article assumes you already understand basic Git workflow. If not, I suggest reading through the [Git Handbook](https://guides.github.com/introduction/git-handbook/).

It is also important to note that you should follow your team's conventions first and foremost. These tips are based on suggestions based upon research and general consensus from the community. But by the end of this article you may have some implementations to suggest that may help your team's workflow.

> I think git enters a whole other realm the moment you start working in teams -- there are so many cool different flows and ways that people can commit code, share code, and add code to your repo open-source or closed-source-wise. — [Scott Tolinski, Syntax.fm](https://syntax.fm/).

Why should you write better commit messages?
--------------------------------------------

I challenge you to open up a personal project or any repository for that matter and run `git log` to view a list of old commit messages. The vast majority of us who have run through tutorials or made quick fixes will say "Yep... I have absolutely no idea what I meant by 'Fix style' 6 months ago."

Perhaps you have encountered code in a professional environment where you had no idea what it was doing or meant for. You've been left in the dark without code comments or a traceable history, and even wondering "what are the odds this will break everything if I remove this line?"

### Back to the Future

By writing good commits, you are simply future-proofing yourself. You could save yourself and/or coworkers hours of digging around while troubleshooting by providing that helpful description.

The extra time it takes to write a thoughtful commit message as a letter to your potential future self is extremely worthwhile. On large scale projects, documentation is imperative for maintenance.

Collaboration and communication are of utmost importance within engineering teams. The Git commit message is a prime example of this. I highly suggest setting up a convention for commit messages on your team if you do not already have one in place.

The Anatomy of a Commit Message
-------------------------------

#### Basic:

`git commit -m <message>`

#### Detailed:

`git commit -m <title> -m <description>`

![Image](https://www.freecodecamp.org/news/content/images/2022/01/Screen-Shot-2022-01-03-at-10.31.49-AM.png)

5 Steps to Write Better Commit Messages
---------------------------------------

Let's summarize the suggested guidelines:

1.  Capitalization and Punctuation: Capitalize the first word and do not end in punctuation. If using Conventional Commits, remember to use all lowercase.
2.  Mood: Use imperative mood in the subject line. Example – `Add fix for dark mode toggle state`. Imperative mood gives the tone you are giving an order or request.
3.  Type of Commit: Specify the type of commit. It is recommended and can be even more beneficial to have a consistent set of words to describe your changes. Example: Bugfix, Update, Refactor, Bump, and so on. See the section on Conventional Commits below for additional information.
4.  Length: The first line should ideally be no longer than 50 characters, and the body should be restricted to 72 characters.
5.  Content: Be direct, try to eliminate filler words and phrases in these sentences (examples: though, maybe, I think, kind of). Think like a journalist.

### How to Find Your Inner Journalist

I never quite thought my Journalism minor would benefit my future career as a Software Engineer, but here we are!

Journalists and writers ask themselves questions to ensure their article is detailed, straightforward, and answers all of the reader's questions.

When writing an article they look to answer _who_, _what_, _where_, _when_, _why_ and _how._ For committing purposes, it is most important to answer the what and why for our commit messages.

To come up with thoughtful commits, consider the following:

*   Why have I made these changes?
*   What effect have my changes made?
*   Why was the change needed?
*   What are the changes in reference to?

Assume the reader does not understand what the commit is addressing. They may not have access to the story addressing the detailed background of the change.

Don't expect the code to be self-explanatory. This is similar to the point above.

It might seem obvious to you, the programmer, if you're updating something like CSS styles since it is visual. You may have intimate knowledge on why these changes were needed at the time, but it's unlikely you will recall why you did that hundreds of pull requests later.

Make it clear _why_ that change was made, and note if it may be crucial for the functionality or not.

See the differences below:

1.  `git commit -m 'Add margin'`
2.  `git commit -m 'Add margin to nav items to prevent them from overlapping the logo'`

It is clear which of these would be more useful to future readers.

Pretend you're writing an important newsworthy article. Give the headline that will sum up what happened and what is important. Then, provide further details in the body in an organized fashion.

In filmmaking, it is often quoted "show, don't tell" using visuals as the communication medium compared to a verbal explanation of what is happening.

In our case, "**tell**, don't \[just\] show" – though we have some visuals at our disposal such as the browser, most of the specifics come from reading the physical code.

If you're a VSCode user, download the [Git Blame](https://marketplace.visualstudio.com/items?itemName=waderyan.gitblame) extension. This is a prime example of when useful commit messages are helpful to future developers.

This plugin will list the person who made the change, the date of the changes, as well as the commit message commented inline.

Imagine how useful this could be in troubleshooting a bug or back-tracing changes made. Other honorable mentions to see Git historical information are [Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory) and [GitLens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens).

![Image](https://www.freecodecamp.org/news/content/images/2022/01/Screen-Shot-2022-01-03-at-10.45.49-AM.png)

Conventional Commits
--------------------

Now that we've covered basic commit structure of a good commit message, I'd like to introduce Conventional Commits to help provide some detail on creating solid commit messages.

At D2iQ, we use Conventional Commit which is a great practice among engineering teams. Conventional Commit is a formatting convention that provides a set of rules to formulate a consistent commit message structure like so:

    <type>[optional scope]: <description>
    
    [optional body]
    
    [optional footer(s)]
    

The commit type can include the following:

*   `feat` – a new feature is introduced with the changes
*   `fix` – a bug fix has occurred
*   `chore` – changes that do not relate to a fix or feature and don't modify src or test files (for example updating dependencies)
*   `refactor` – refactored code that neither fixes a bug nor adds a feature
*   `docs` – updates to documentation such as a the README or other markdown files
*   `style` – changes that do not affect the meaning of the code, likely related to code formatting such as white-space, missing semi-colons, and so on.
*   `test` – including new or correcting previous tests
*   `perf` – performance improvements
*   `ci` – continuous integration related
*   `build` – changes that affect the build system or external dependencies
*   `revert` – reverts a previous commit

The commit type subject line should be all lowercase with a character limit to encourage succinct descriptions.

The optional commit body should be used to provide further detail that cannot fit within the character limitations of the subject line description.

It is also a good location to utilize `BREAKING CHANGE: <description>` to note the reason for a breaking change within the commit.

The footer is also optional. We use the footer to link the JIRA story that would be closed with these changes for example: `Closes D2IQ-<JIRA #>` .

#### Full Conventional Commit Example

    fix: fix foo to enable bar
    
    This fixes the broken behavior of the component by doing xyz. 
    
    BREAKING CHANGE
    Before this fix foo wasn't enabled at all, behavior changes from <old> to <new>
    
    Closes D2IQ-12345
    

To ensure that these committing conventions remain consistent across developers, commit message linting can be configured before changes are able to be pushed up. [Commitizen](https://commitizen-tools.github.io/commitizen/) is a great tool to enforce standards, sync up semantic versioning, along with other helpful features.

To aid in adoption of these conventions, it's helpful to include guidelines for commits in a contributing or README markdown file within your projects.

Conventional Commit works particularly well with semantic versioning (learn more at [SemVer.org](https://semver.org/)) where commit types can update the appropriate version to release. You can also [read more about Conventional Commits here](https://www.conventionalcommits.org/en/v1.0.0/).

Commit Message Comparisons
--------------------------

Review the following messages and see how many of the suggested guidelines they check off in each category.

#### Good

*   `feat: improve performance with lazy load implementation for images`
*   `chore: update npm dependency to latest version`
*   `Fix bug preventing users from submitting the subscribe form`
*   `Update incorrect client phone number within footer body per client request`

#### Bad

*   `fixed bug on landing page`
*   `Changed style`
*   `oops`
*   `I think I fixed it this time?`
*   empty commit messages

Conclusion
----------

Writing good commit messages is an extremely beneficial skill to develop, and it helps you communicate and collaborate with your team. Commits serve as an archive of changes. They can become an ancient manuscript to help us decipher the past, and make reasoned decisions in the future.

There is an existing set of agreed-upon standards we can follow, but as long as your team agrees upon a convention that is descriptive with future readers in mind, there will undoubtedly be long-term benefits.

In this article, we've learned some tactics to level up our commit messages. How do you think these techniques can improve your commits?

I hope you've learned something new, thanks for reading!

# List of git commit types

1. **Features**:
   - **Type**: `feat`
   - **Description**: This type is used for commits that introduce new features or functionality to your project.
   - **Example Title**: "Add user authentication feature"

2. **Bug Fixes**:
   - **Type**: `fix`
   - **Description**: This type is used for commits that fix bugs in the existing codebase.
   - **Example Title**: "Fix login issue on mobile devices"

3. **Documentation**:
   - **Type**: `docs`
   - **Description**: This type is used for commits that only change documentation, such as README files, comments, or other explanatory content.
   - **Example Title**: "Update API documentation with new endpoints"

4. **Styles**:
   - **Type**: `style`
   - **Description**: This type is used for commits that make changes to the code without affecting its functionality, such as formatting, white-space adjustments, and adding missing semi-colons.
   - **Example Title**: "Format code to adhere to new style guide"

5. **Code Refactoring**:
   - **Type**: `refactor`
   - **Description**: This type is used for commits that reorganize or simplify the code without fixing a bug or adding a feature.
   - **Example Title**: "Refactor user model to improve readability"

6. **Performance Improvements**:
   - **Type**: `perf`
   - **Description**: This type is used for commits that enhance the performance of the code, such as optimizing algorithms or reducing resource usage.
   - **Example Title**: "Optimize database queries to reduce load time"

7. **Tests**:
   - **Type**: `test`
   - **Description**: This type is used for commits that add new tests or correct existing ones.
   - **Example Title**: "Add unit tests for user authentication service"

8. **Builds**:
   - **Type**: `build`
   - **Description**: This type is used for commits that affect the build system, such as changes to configuration files or external dependencies (e.g., gulp, broccoli, npm).
   - **Example Title**: "Update npm dependencies to latest versions"

9. **Continuous Integrations**:
   - **Type**: `ci`
   - **Description**: This type is used for commits that modify CI configuration files and scripts, such as Travis, CircleCI, BrowserStack, or SauceLabs.
   - **Example Title**: "Configure CircleCI to run tests on pull requests"

10. **Chores**:
    - **Type**: `chore`
    - **Description**: This type is used for commits that involve tasks not directly related to the source code or test files, such as updating project metadata or cleaning up temporary files.
    - **Example Title**: "Remove unused files from repository"

11. **Reverts**:
    - **Type**: `revert`
    - **Description**: This type is used for commits that revert a previous commit to undo changes.
    - **Example Title**: "Revert 'Add experimental feature' due to stability issues"

Using this information, write a git commit message for the following changes.
{{{ diff }}}

Make sure your git commit message follows the format below:

```
<type>[optional scope]: <description>

[optional bdy]

[optional footer(s)]
```

Here is an example:

```
fix: fix foo to enable bar

This fixes the broken behavior of the component by doing xyz. 

BREAKING CHANGE
Before this fix foo wasn't enabled at all, behavior changes from <old> to <new>

Closes D2IQ-12345
```